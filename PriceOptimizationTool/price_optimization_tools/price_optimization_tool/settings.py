"""
Django settings for price_optimization_tool project.

Generated by 'django-admin startproject' using Django 3.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
from corsheaders.defaults import default_headers

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-u=dg#z_e2_!623a+aeh6%m#55h9zk&%n_(x-i(*@szemhx%&o9'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True  # Set to False in production to disable debug mode

ALLOWED_HOSTS = []  # List of allowed hosts to restrict access to the server


# Application definition
INSTALLED_APPS = [
    # Built-in Django apps
    'django.contrib.admin',  # Admin interface
    'django.contrib.auth',  # Authentication and authorization
    'django.contrib.contenttypes',  # Content type framework for models
    'django.contrib.sessions',  # Session management
    'django.contrib.messages',  # Messaging framework
    'django.contrib.staticfiles',  # Static files (CSS, JS, Images)

    # Third-party apps
    'corsheaders',  # CORS support for handling cross-origin requests
    'rest_framework',  # Django REST Framework for building APIs
    'rest_framework_simplejwt',  # JWT-based authentication for REST API
    'rest_framework_simplejwt.token_blacklist',  # Blacklisting JWT tokens
    'rest_framework.authtoken',  # Token-based authentication for DRF

    # Custom apps
    'accounts',  # User management app
    'products',  # Product management app
    'pricing',  # Pricing optimization app
]

# Middleware configuration for handling requests and responses
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',  # Basic security middleware
    'django.contrib.sessions.middleware.SessionMiddleware',  # Session management
    'django.middleware.common.CommonMiddleware',  # Common middleware to handle things like redirects
    'django.middleware.csrf.CsrfViewMiddleware',  # CSRF protection for forms
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # Handles user authentication
    'django.contrib.messages.middleware.MessageMiddleware',  # Handles user messages (e.g., flash messages)
    'django.middleware.clickjacking.XFrameOptionsMiddleware',  # Prevents clickjacking attacks
    "corsheaders.middleware.CorsMiddleware",  # Middleware to handle CORS (Cross-Origin Resource Sharing)
    "django.middleware.common.CommonMiddleware",  # Common middleware to manage various settings
]

ROOT_URLCONF = 'price_optimization_tool.urls'  # Root URL configuration for the project

# Template configuration (used for rendering HTML templates, not typically needed in API projects)
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],  # No template directories as we are using DRF (API-only project)
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI application configuration (for deploying Django with WSGI server like Gunicorn)
WSGI_APPLICATION = 'price_optimization_tool.wsgi.application'


# Database configuration (PostgreSQL in this case)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',  # PostgreSQL database engine
        'NAME': 'pricing_application_db',  # Database name
        'USER': 'postgres',  # Database user
        'PASSWORD': 'arzm@nIA112',  # Database password
        'HOST': 'localhost',  # Database host (local server)
        'PORT': '5432',  # PostgreSQL default port
    }
}


# Password validation settings (improves security of user authentication)
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Localization settings (time zone and language settings)
LANGUAGE_CODE = 'en-us'  # Language set to US English

TIME_ZONE = 'UTC'  # Time zone set to UTC

USE_I18N = True  # Internationalization support (to handle multiple languages)
USE_L10N = True  # Localization support (localizing formats like dates and numbers)
USE_TZ = True  # Enable time zone support


# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'  # URL for serving static files

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'  # Default primary key type for models


# REST framework JWT authentication settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # Using JWT for authentication
    ),
}

# Email configuration for sending emails (use for development or production mail sending)
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'  # Use SMTP for email sending
EMAIL_HOST = 'smtp.gmail.com'  # Gmail SMTP server
EMAIL_PORT = 587  # Gmail SMTP port
EMAIL_USE_TLS = True  # Use TLS encryption for email
EMAIL_HOST_USER = ''  # Gmail email address
EMAIL_HOST_PASSWORD = ''  # Gmail email password (should be kept secret in production)

# JWT configuration for access and refresh token lifetimes, token rotation, and more
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=20),  # Access token expires in 20 hours
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),  # Refresh token expires in 1 day
    "ROTATE_REFRESH_TOKENS": False,  # Disable token rotation
    "BLACKLIST_AFTER_ROTATION": False,  # Don't blacklist tokens after rotation
    "UPDATE_LAST_LOGIN": False,  # Don't update the last login time on token refresh

    # JWT Signing and verifying configurations
    "ALGORITHM": "HS256",  # Algorithm used for signing the JWT token
    "SIGNING_KEY": SECRET_KEY,  # Secret key used for signing the JWT
    "VERIFYING_KEY": "",  # Optional verifying key (for public key validation)
    "AUDIENCE": None,  # Optional audience claim
    "ISSUER": None,  # Optional issuer claim
    "JSON_ENCODER": None,  # Optional JSON encoder
    "JWK_URL": None,  # Optional URL to fetch JSON Web Keys

    # JWT Token configuration
    "AUTH_HEADER_TYPES": ("Bearer",),  # Authentication header type
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",  # Header name for the token
    "USER_ID_FIELD": "id",  # Field used for user identification
    "USER_ID_CLAIM": "user_id",  # Claim name for the user ID
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),  # Token class to be used
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),  # Sliding token expiration time
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),  # Sliding token refresh expiration
}

# Custom user model for the authentication system
AUTH_USER_MODEL = 'accounts.CustomUser'  # Custom user model located in the `accounts` app

# CORS (Cross-Origin Resource Sharing) settings for allowing all origins
CORS_ALLOW_ALL_ORIGINS = True  # Allow all domains to make requests to the server
